int upperBound(int[] A, int S)
  N = length(A)
  for i from 0 to (N - 1)
    if (A[i] > S)
      return i
  return N

The number in curly braces on the right of each line is the execution times

int upperBound(int[] A, int S)
  N = length(A)                        {1}
  for i from 0 to (N - 1)              {N}
    if (A[i] > S)                      {N - 1}
      return i                         {1}
  return N                             {1}

Total execution times: 1 + N + (N - 1) + 1 + 1 = 2N + 2
The big-O of above algorithm is O(N)

----------------
int upperBound(int[] A, int S)
  N = length(A)
  left = 0
  right = N - 1
  while (left < right)
    mid = (left + right) / 2
    if (A[mid] <= S)
      left = mid + 1
    else
      right = mid
  if (A[left] > S)
    return left
  return left + 1

Analysis

int upperBound(int[] A, int S)
  N = length(A)                      {1}
  left = 0                           {1}
  right = N - 1                      {1}
  while (left < right)               {lgN}
    mid = (left + right) / 2         {lgN}
    if (A[mid] <= S)                 {lgN}
      left = mid + 1                 {lgN}
    else
      right = mid                    {lgN}
  if (A[left] > S)                   {1}
    return left                      {1}
  return left + 1                    {1}

Initially, left and right are N-position far away
Inside the loop, the distance between left and right is divided by 2 in each iteration
So, the number of iterations is lgN
Adding all the numbers and keep the significant ones
1 + 1 + 1 + lgN + lgN + lgN + lgN + lgN + 1 + 1 + 1 => O(lgN)

Correctness proof:
- Eventually, there is 1 index: left == right
- No element to the left of "left" > S (the if branch)
- All elements to the right of "left" > S (the else branch)
- As such, one more check at the end (A[left] > S) is enough to determine if (left) or (left + 1) is the upper bound